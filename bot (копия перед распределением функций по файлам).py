import os
import django
from dotenv import load_dotenv
import textwrap

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django –¥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'telegram_project.settings')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
django.setup()


from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters
from django.conf import settings
from telegram_data.models import TelegramMessage
from asgiref.sync import sync_to_async
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
import atexit
import threading
import asyncio
from bot_first_aid.handlers.start_handler import start
# from bot.handlers.medicine_handlers import add_medicine
# from bot.handlers.disease_handlers import handle_DISEASE_GROUP
# from bot.scheduler_tasks import run_check_medicines
from bot_first_aid.globals import chat_ids, CHOOSING, TYPING_NAME, TYPING_EXPIRY_DATE, TYPING_DISEASE_GROUP, \
    TYPING_ORGAN_GROUP, SAVE_RECORD_IN_DB, TYPING_HTML_LINK, TYPING_quantity

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(CHOOSING,
 TYPING_NAME,
 TYPING_EXPIRY_DATE,
 TYPING_DISEASE_GROUP,
 TYPING_ORGAN_GROUP,
 SAVE_RECORD_IN_DB,
 TYPING_HTML_LINK,
 TYPING_quantity) = range(8)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
chat_ids = set()

async def check_medicines():
    print("check_medicines")
    # –ü–æ–ª—É—á–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä—ã—Ö –º–µ–Ω—å—à–µ 3
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    low_quantity_medicines = await sync_to_async(list)(TelegramMessage.objects.filter(quantity__lt=3).values_list('medicine_name', flat=True))

    if low_quantity_medicines:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "–õ–µ–∫–∞—Ä—Å—Ç–≤–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä—ã—Ö –º–µ–Ω—å—à–µ 3:\n" + "\n".join(low_quantity_medicines)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç-–±–æ—Ç
        bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for chat_id in chat_ids:
            await bot.send_message(chat_id=chat_id, text=message)

# # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# async def start(update, context):
#     chat_id = update.message.chat_id
#     chat_ids.add(chat_id)
#     print("start")
#     keyboard = [[InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ", callback_data='add_medicine')],
#                 [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫", callback_data='view_list')]
#                 ]
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
#     await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
#     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ context.user_data, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     context.user_data['awaiting_input'] = 'button'  # –û–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
#     return CHOOSING

async def handle_view_list(update, context):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data='show_full_list')],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫", callback_data='show_links')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=reply_markup
    )
    await update.callback_query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
    return CHOOSING

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback_query: –¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫,
# —á—Ç–æ–±—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏.
async def handle_callback_query(update, context):
    query = update.callback_query
    data = query.data

    if data == 'show_full_list':
        await view_list(update, context)
    elif data == 'show_links':
        await view_links(update, context)
    return CHOOSING

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤
async def view_list(update, context):
    medicines = await sync_to_async(list)(TelegramMessage.objects.all())

    if medicines:
        header = """
<pre>
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞</b>   | <b>–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏</b>| <b>–ö–æ–ª-–≤–æ</b> 
----------------------------------------
"""
        message_text = header
        messages = []
        max_name_width = 20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞

        for medicine in medicines:
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            medicine_name = medicine.medicine_name or "–ù–µ –∑–∞–¥–∞–Ω–æ"
            wrapped_name = textwrap.wrap(medicine_name, width=max_name_width)
            name_block = "\n".join(f"{line:<{max_name_width}}" for line in wrapped_name)

            expiry_date = (str(medicine.expiry_date) or "–ù–µ –∑–∞–¥–∞–Ω–æ").ljust(12)
            quantity = (str(medicine.quantity) if medicine.quantity is not None else "-").ljust(5)

            name_lines = name_block.split("\n")
            line = f"{name_lines[0]} | {expiry_date} | {quantity}\n"
            for additional_line in name_lines[1:]:
                line += f"{additional_line} |\n"  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ –ª–∏–º–∏—Ç—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞
            if len(message_text) + len(line) > 4000:
                messages.append(message_text + "</pre>")
                message_text = header  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞

            message_text += line

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_text:
            messages.append(message_text + "</pre>")
    else:
        messages = ["–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤."]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    await update.callback_query.answer()
    for text in messages:
        await update.callback_query.message.reply_text(text, parse_mode="HTML")

    return CHOOSING

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ (–±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫"):
async def view_links(update, context):
    medicines = await sync_to_async(list)(TelegramMessage.objects.all())

    if medicines:
        # –ù–∞—á–∏–Ω–∞–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        message_text = "<b>–°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏ —Å—Å—ã–ª–æ–∫:</b>\n\n"

        for medicine in medicines:
            medicine_name = medicine.medicine_name or "–ù–µ –∑–∞–¥–∞–Ω–æ"
            html_link = medicine.HTML_LINK or "–ù–µ –∑–∞–¥–∞–Ω–æ"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –∑–∞–¥–∞–Ω–∞, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ç–µ–∫—Å—Ç
            if html_link != "–ù–µ –∑–∞–¥–∞–Ω–æ":
                message_text += f"üîπ <b>{medicine_name}</b>: <a href='{html_link}'>{html_link}</a>\n\n"
            else:
                message_text += f"üîπ <b>{medicine_name}</b>: –°—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞\n\n"

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTML
        message_text += "<i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ü–µ—Ä–µ–π—Ç–∏.</i>"
    else:
        message_text = "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(message_text, parse_mode="HTML", disable_web_page_preview=True)

    return CHOOSING

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"
async def add_medicine(update, context):
    print("add_medicine")
    await update.callback_query.answer()  # –û–ø–æ–≤–µ—â–∞–µ–º –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:")
    context.user_data['awaiting_input'] = 'name'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ context.user_data, —á—Ç–æ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    return TYPING_NAME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
async def handle_name(update, context):
    print("handle_name")
    name = update.message.text
    context.user_data['name'] = name
    text_in_chat_for_user = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–µ—Ç–æ–∫/–¥–æ–∑:"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    existing_medicine = await sync_to_async(lambda: TelegramMessage.objects.filter(medicine_name=name).first())()
    if existing_medicine:
        # –ï—Å–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —ç—Ç–∞–ø TYPING_NAME
        await update.message.reply_text(f"–õ–µ–∫–∞—Ä—Å—Ç–≤–æ —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return TYPING_NAME  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è

    # –¥–∞–ª—å—à–µ –∏–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    await update.message.reply_text(text_in_chat_for_user)
    context.user_data['awaiting_input'] = 'quantity'      # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –±–æ—Ç —Ç–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–µ—Ç–æ–∫
    return TYPING_quantity

async def handle_quantity(update, context) -> int:
    print("handle_quantity")
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–µ—Ç–æ–∫
    tablet_quantity = update.message.text
    text_in_chat_for_user = "–í–≤–µ–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ª–µ—á–∏—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
    if tablet_quantity.isdigit():
        context.user_data['tablet_quantity'] = int(tablet_quantity)
        await update.message.reply_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–µ—Ç–æ–∫: {tablet_quantity}")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–±–ª–µ—Ç–æ–∫.")
        return TYPING_quantity

    # –¥–∞–ª—å—à–µ –∏–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    await skip_button(update, context, text_in_chat_for_user, True)
    context.user_data['awaiting_input'] = 'ORGAN'      # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –±–æ—Ç —Ç–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ—Ç –æ—Ä–≥–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ª–µ—á–∏—Ç—å
    return TYPING_ORGAN_GROUP

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ä–≥–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ª–µ—á–∏—Ç —ç—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
async def handle_ORGAN(update, context):
    print("handle_ORGAN")
    handle_ORGAN_text = "–ù–µ –∑–∞–¥–∞–Ω–æ" if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else update.message.text
    text_in_chat_for_user = "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –±–æ–ª–µ–∑–Ω–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"

    # –ï—Å–ª–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        return await skip_current_step(
            update,
            context,
            'ORGAN',
            TYPING_DISEASE_GROUP,
            handle_ORGAN_text,
            'DISEASE_GROUP',
            text_in_chat_for_user
        )
    if update.message.text == "–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ä–≥–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        return await choose_organ_from_list(update, context)

    context.user_data['ORGAN'] = handle_ORGAN_text
    # –¥–∞–ª—å—à–µ –∏–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    await skip_button(update, context, text_in_chat_for_user, False)
    context.user_data['awaiting_input'] = 'DISEASE_GROUP'  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Ç–∏–ø–∞ –±–æ–ª–µ–∑–Ω–∏
    return TYPING_DISEASE_GROUP

async def skip_current_step(update, context, current_step, next_step, default_value, next_input_flag, prompt_text):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    :param update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param current_step: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è.
    :param next_step: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏.
    :param default_value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
    :param next_input_flag: –°–ª–µ–¥—É—é—â–∏–π —Ñ–ª–∞–≥ –≤–≤–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.
    :param prompt_text: –¢–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í–≤–µ–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ª–µ—á–∏—Ç—å").
    """
    print("skip_step")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    context.user_data[current_step] = default_value
    context.user_data['awaiting_input'] = next_input_flag  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞

    create_choosing = False
    if next_step == TYPING_ORGAN_GROUP:
        create_choosing = True

    # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - TYPING_EXPIRY_DATE, –Ω–µ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if next_step != TYPING_EXPIRY_DATE:
        await skip_button(update, context, prompt_text, create_choosing)
    else:
        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ TYPING_EXPIRY_DATE
        await update.message.reply_text(prompt_text)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    return next_step

async def skip_button(update, context, request_text, choose_from_list=False):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"

    :param update: –æ–±—ä–µ–∫—Ç update –∏–∑ Telegram
    :param context: –æ–±—ä–µ–∫—Ç context –∏–∑ Telegram
    :param request_text: —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    # –í–µ—Ç–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if choose_from_list:
        keyboard = [["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞"]]  # –î–ª—è —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∞
    else:
        keyboard = [["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]]  # –î–ª—è –¥—Ä—É–≥–∏—Ö —ç—Ç–∞–ø–æ–≤
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø update
    if update.message:  # –ö–æ–≥–¥–∞ update —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
        await update.message.reply_text(
            request_text,
            reply_markup=reply_markup
        )
    elif update.callback_query:  # –ö–æ–≥–¥–∞ update —Å–æ–¥–µ—Ä–∂–∏—Ç callback_query
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤ –æ—Ç–≤–µ—Ç –Ω–∞ callback_query
        await update.callback_query.message.reply_text(
            request_text,
            reply_markup=reply_markup
        )
        # –û—Ç–≤–µ—Ç –Ω–∞ callback_query, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        await update.callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
async def handle_DISEASE_GROUP(update, context):
    print("handle_DISEASE_GROUP")
    DISEASE_GROUP_text = "–ù–µ –∑–∞–¥–∞–Ω–æ" if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else update.message.text
    text_in_chat_for_user = "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.12.2024):"

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # print('–≤—ã–∑–æ–≤ skip_step –∏–∑ handle_DISEASE_GROUP')
        return await skip_current_step(
            update,
            context,
            'DISEASE_GROUP',
            TYPING_EXPIRY_DATE,
            DISEASE_GROUP_text,
            'expiry_date',
            text_in_chat_for_user
        )
    context.user_data['DISEASE_GROUP'] = DISEASE_GROUP_text
    # –¥–∞–ª—å—à–µ –∏–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    await update.message.reply_text(text_in_chat_for_user)
    context.user_data['awaiting_input'] = 'expiry_date'  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –±–æ—Ç —Ç–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ—Ç –¥–∞—Ç—É
    return TYPING_EXPIRY_DATE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
async def handle_expiry(update, context):
    print("handle_expiry")
    expiry_date_str = update.message.text
    text_in_chat_for_user = "–í–≤–µ–¥–∏—Ç–µ HTML —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫ –ª–µ–∫–∞—Ä—Å—Ç–≤—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    context.user_data['expiry_date_str'] = expiry_date_str
    expiry_date = parse_expiry_date(expiry_date_str)
    if expiry_date is None:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥.")
        return TYPING_EXPIRY_DATE
    context.user_data['expiry_date'] = expiry_date

    # –¥–∞–ª—å—à–µ –∏–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    await skip_button(update, context, text_in_chat_for_user)
    context.user_data['awaiting_input'] = 'HTML_LINK'      # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –±–æ—Ç —Ç–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ—Ç HTML_LINK
    return TYPING_HTML_LINK

async def handle_html_link(update, context):
    print("handle_html_link")
    HTML_LINK_text = "–ù–µ –∑–∞–¥–∞–Ω–æ" if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else update.message.text
    context.user_data['HTML_LINK_text'] = HTML_LINK_text

    # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    context.user_data['awaiting_input'] = 'save_record'

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º handle_save_record
    return await handle_save_record(update, context)

async def handle_save_record(update, context):
    print("handle_save_record")
    name = context.user_data['name']
    DISEASE_GROUP_text = context.user_data['DISEASE_GROUP']
    ORGAN_text = context.user_data['ORGAN']
    expiry_date_str = context.user_data['expiry_date_str']
    expiry_date = context.user_data['expiry_date']
    HTML_LINK_text = context.user_data['HTML_LINK_text']
    tablet_quantity = context.user_data['tablet_quantity']

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await save_medicine_record(name, expiry_date_str, expiry_date, DISEASE_GROUP_text, ORGAN_text, HTML_LINK_text, tablet_quantity)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞
    await update.message.reply_text(f"–õ–µ–∫–∞—Ä—Å—Ç–≤–æ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ. –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {expiry_date_str}.")
    # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    del context.user_data['awaiting_input']
    return ConversationHandler.END

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
async def save_medicine_record(name, expiry_date_str, expiry_date, DISEASE_GROUP_text, ORGAN_text, HTML_LINK_text, tablet_quantity):
    await sync_to_async(TelegramMessage.objects.create)(
        message_id="0",
        user_id="0",
        text=f"{name} - {expiry_date_str}",
        expiry_date=expiry_date,
        medicine_name=name,
        DISEASE_GROUP=DISEASE_GROUP_text,
        ORGAN=ORGAN_text,
        HTML_LINK=HTML_LINK_text,
        quantity=tablet_quantity
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã
def parse_expiry_date(expiry_date_str):
    try:
        return datetime.strptime(expiry_date_str, "%d.%m.%Y").date()
    except ValueError:
        return None

# –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
async def cancel(update, context):
    print("cancel")
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    if 'awaiting_input' in context.user_data:
        del context.user_data['awaiting_input']
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞
async def handle_message(update, context):
    print("handle_message")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    if context.user_data.get('awaiting_input') == 'button':
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ", callback_data='add_medicine')],
            [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫", callback_data='view_list')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return CHOOSING

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ä–≥–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.
async def handle_organ_selection(update, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ä–≥–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.
    """
    print("handle_organ_selection –≤—ã–∑–≤–∞–Ω–∞")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ callback_query
    query = update.callback_query
    if query:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
            selected_organ = query.data.split(":")[1]
            context.user_data['ORGAN'] = selected_organ

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ä–≥–∞–Ω–µ
            await query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_organ}") # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∫—Ä–∞—Ç–∫–æ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ):
            await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_organ}") # –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ.

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            text_in_chat_for_user = "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –±–æ–ª–µ–∑–Ω–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
            await skip_button(update, context, text_in_chat_for_user)
            context.user_data['awaiting_input'] = 'DISEASE_GROUP'

            return TYPING_DISEASE_GROUP

        except IndexError:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ä–≥–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç callback_query, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("–û—à–∏–±–∫–∞: update.callback_query –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å –æ—Ä–≥–∞–Ω."
        )
        return ConversationHandler.END

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –æ—Ä–≥–∞–Ω–∞–º–∏.
async def choose_organ_from_list(update, context):
    print("choose_organ_from_list")
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤
    organs = ["–ì–æ–ª–æ–≤–∞", "–ñ–∏–≤–æ—Ç", "–ü–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫"]
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ä–≥–∞–Ω–∞
    keyboard = [[InlineKeyboardButton(organ, callback_data=f"select_organ:{organ}")] for organ in organs]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=reply_markup)
    return CHOOSING

def run_check_medicines():
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    loop.run_until_complete(check_medicines())

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
def main():
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start), # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
            MessageHandler(filters.TEXT & ~filters.COMMAND, start) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        ],
        states={
            CHOOSING: [
                CallbackQueryHandler(add_medicine, pattern='^add_medicine$'),
                CallbackQueryHandler(handle_view_list, pattern='^view_list$'),
                CallbackQueryHandler(handle_callback_query, pattern='^show_full_list$'),
                CallbackQueryHandler(view_links, pattern='^show_links$'),
                CallbackQueryHandler(handle_organ_selection, pattern='^select_organ:.*$'),
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            ],
            TYPING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
            TYPING_quantity: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quantity)],
            TYPING_ORGAN_GROUP: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ORGAN),
                # MessageHandler(filters.Regex("^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$"), skip_current_step),  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            ],
            TYPING_DISEASE_GROUP: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_DISEASE_GROUP),
                # MessageHandler(filters.Regex("^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$"), skip_current_step),  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            ],
            TYPING_EXPIRY_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_expiry)],
            TYPING_HTML_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_html_link)],
            SAVE_RECORD_IN_DB: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_save_record)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
    application.add_handler(conv_handler)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler_kol_tablet = BackgroundScheduler()

    ## –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤
    # –ù–∞—Å—Ç—Ä–æ–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 12:00
    scheduler_kol_tablet.add_job(run_check_medicines, 'cron', hour='12-22', minute='*')
    scheduler_kol_tablet.add_job(run_check_medicines, 'cron', hour=23, minute='0-30')

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=scheduler_kol_tablet.start)
    scheduler_thread.start()

    # –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤—å—Ç–µ shutdown –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    atexit.register(lambda: scheduler_kol_tablet.shutdown())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
