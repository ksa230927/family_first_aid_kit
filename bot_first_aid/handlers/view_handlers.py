import textwrap

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from bot_first_aid.globals import CHOOSING
from telegram_data.models import TelegramMessage
from asgiref.sync import sync_to_async

async def handle_view_list(update, context):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data='show_full_list')],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫", callback_data='show_links')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è
    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=reply_markup
    )
    await update.callback_query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
    return CHOOSING

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback_query: –¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫,
# —á—Ç–æ–±—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏.
async def handle_callback_query(update, context):
    query = update.callback_query
    data = query.data

    if data == 'show_full_list':
        await view_full_list(update, context)
    elif data == 'show_links':
        await view_links(update, context)
    return CHOOSING

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤
async def view_full_list(update, context):
    medicines = await sync_to_async(list)(TelegramMessage.objects.all())

    if medicines:
        header = """
<pre>
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞</b>   | <b>–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏</b>| <b>–ö–æ–ª-–≤–æ</b> 
----------------------------------------
"""
        message_text = header
        messages = []
        max_name_width = 20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞

        for medicine in medicines:
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            medicine_name = medicine.medicine_name or "–ù–µ –∑–∞–¥–∞–Ω–æ"
            wrapped_name = textwrap.wrap(medicine_name, width=max_name_width)
            name_block = "\n".join(f"{line:<{max_name_width}}" for line in wrapped_name)

            expiry_date = (str(medicine.expiry_date) or "–ù–µ –∑–∞–¥–∞–Ω–æ").ljust(12)
            quantity = (str(medicine.quantity) if medicine.quantity is not None else "-").ljust(5)

            name_lines = name_block.split("\n")
            line = f"{name_lines[0]} | {expiry_date} | {quantity}\n"
            for additional_line in name_lines[1:]:
                line += f"{additional_line} |\n"  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ –ª–∏–º–∏—Ç—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞
            if len(message_text) + len(line) > 4000:
                messages.append(message_text + "</pre>")
                message_text = header  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞

            message_text += line

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_text:
            messages.append(message_text + "</pre>")
    else:
        messages = ["–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤."]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    await update.callback_query.answer()
    for text in messages:
        await update.callback_query.message.reply_text(text, parse_mode="HTML")

    return CHOOSING

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ (–±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫"):
async def view_links(update, context):
    medicines = await sync_to_async(list)(TelegramMessage.objects.all())

    if medicines:
        # –ù–∞—á–∏–Ω–∞–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        message_text = "<b>–°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏ —Å—Å—ã–ª–æ–∫:</b>\n\n"

        for medicine in medicines:
            medicine_name = medicine.medicine_name or "–ù–µ –∑–∞–¥–∞–Ω–æ"
            html_link = medicine.HTML_LINK or "–ù–µ –∑–∞–¥–∞–Ω–æ"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –∑–∞–¥–∞–Ω–∞, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ç–µ–∫—Å—Ç
            if html_link != "–ù–µ –∑–∞–¥–∞–Ω–æ":
                message_text += f"üîπ <b>{medicine_name}</b>: <a href='{html_link}'>{html_link}</a>\n\n"
            else:
                message_text += f"üîπ <b>{medicine_name}</b>: –°—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞\n\n"

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTML
        message_text += "<i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ü–µ—Ä–µ–π—Ç–∏.</i>"
    else:
        message_text = "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(message_text, parse_mode="HTML", disable_web_page_preview=True)

    return CHOOSING
